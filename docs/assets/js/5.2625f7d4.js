(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{331:function(t,i,s){t.exports=s.p+"assets/img/SpringO_6_3.0fad3f27.jpg"},406:function(t,i,s){t.exports=s.p+"assets/img/SpringO_1_1.fbcffea2.jpg"},407:function(t,i,s){t.exports=s.p+"assets/img/SpringO_2_1.9db2db2c.jpg"},408:function(t,i,s){t.exports=s.p+"assets/img/SpringO_3_1.9b61b032.jpg"},409:function(t,i,s){t.exports=s.p+"assets/img/SpringO_3_2.39e261ed.jpg"},410:function(t,i,s){t.exports=s.p+"assets/img/SpringO_3_3.981cbcf5.jpg"},411:function(t,i,s){t.exports=s.p+"assets/img/SpringO_3_4.9a4ad44a.jpg"},412:function(t,i,s){t.exports=s.p+"assets/img/SpringO_3_5.c83af1c2.jpg"},413:function(t,i,s){t.exports=s.p+"assets/img/SpringO_4_1.f724ecfd.jpg"},414:function(t,i,s){t.exports=s.p+"assets/img/SpringO_4_2.efd6e7e3.jpg"},415:function(t,i,s){t.exports=s.p+"assets/img/SpringO_4_3.aee7df6b.jpg"},416:function(t,i,s){t.exports=s.p+"assets/img/SpringO_4_4.c863567b.jpg"},417:function(t,i,s){t.exports=s.p+"assets/img/SpringO_5_1.1f5d73d9.jpg"},418:function(t,i,s){t.exports=s.p+"assets/img/SpringO_5_2.3ad78bd2.jpg"},419:function(t,i,s){t.exports=s.p+"assets/img/SpringO_5_3.130a077d.jpg"},420:function(t,i,s){t.exports=s.p+"assets/img/SpringO_5_4.cec2a075.jpg"},421:function(t,i,s){t.exports=s.p+"assets/img/SpringO_5_5.3e8a7e66.jpg"},422:function(t,i,s){t.exports=s.p+"assets/img/SpringO_5_6.b6b057e6.jpg"},423:function(t,i,s){t.exports=s.p+"assets/img/SpringO_5_7.13731f62.jpg"},424:function(t,i,s){t.exports=s.p+"assets/img/SpringO_5_8.b56083fe.jpg"},425:function(t,i,s){t.exports=s.p+"assets/img/SpringO_5_9.12291ec2.jpg"},426:function(t,i,s){t.exports=s.p+"assets/img/SpringO_5_10.9c0e4d53.jpg"},427:function(t,i,s){t.exports=s.p+"assets/img/SpringO_6_1.2b5a899a.jpg"},428:function(t,i,s){t.exports=s.p+"assets/img/SpringO_6_2.c61a5696.jpg"},429:function(t,i,s){t.exports=s.p+"assets/img/SpringO_7_1.c84a7b5d.jpg"},430:function(t,i,s){t.exports=s.p+"assets/img/SpringO_7_2.0578187c.jpg"},431:function(t,i,s){t.exports=s.p+"assets/img/SpringO_7_3.ed1d7dde.jpg"},542:function(t,i,s){"use strict";s.r(i);var _=s(43),r=Object(_.a)({},(function(){var t=this,i=t.$createElement,_=t._self._c||i;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"spring-core"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring-core"}},[t._v("#")]),t._v(" Spring Core")]),t._v(" "),_("h2",{attrs:{id:"why-spring"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#why-spring"}},[t._v("#")]),t._v(" Why Spring")]),t._v(" "),_("ul",[_("li",[t._v("用於構建 Java 應用程序非常流行的框架")]),t._v(" "),_("li",[t._v("是 J2EE 更簡單和輕量級的替代品")]),t._v(" "),_("li",[t._v("提供大量的輔助……讓事情變得更容易")])]),t._v(" "),_("h2",{attrs:{id:"java-ee-演進"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java-ee-演進"}},[t._v("#")]),t._v(" Java EE 演進")]),t._v(" "),_("p",[_("img",{attrs:{src:s(406),alt:"springO_1_1",title:"springO_1_1"}})]),t._v(" "),_("h2",{attrs:{id:"java-ee-spring"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java-ee-spring"}},[t._v("#")]),t._v(" Java EE & Spring")]),t._v(" "),_("p",[_("img",{attrs:{src:s(407),alt:"springO_2_1",title:"springO_2_1"}})]),t._v(" "),_("h2",{attrs:{id:"spring-5"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring-5"}},[t._v("#")]),t._v(" Spring 5")]),t._v(" "),_("ul",[_("li",[t._v("使用 Java 8 或更高的版本")]),t._v(" "),_("li",[t._v("棄用舊版集成：Tiles、Velocity、Portlet、Guava 等")]),t._v(" "),_("li",[t._v("升級 Spring MVC 以使用新版本的 Servlet API 4.0")]),t._v(" "),_("li",[t._v("添加了新的反應式編程框架：Spring WebFlux")])]),t._v(" "),_("h2",{attrs:{id:"spring-框架概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring-框架概述"}},[t._v("#")]),t._v(" Spring 框架概述")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("使用 Java POJO (Plain-Old-Java-Objects) 進行輕量級開發")])]),t._v(" "),_("li",[_("p",[t._v("依賴注入(Dependency Injection) 將物件的建立、物件的儲存、物件的管理交給了 Spring 容器")])]),t._v(" "),_("li",[_("p",[t._v("宣告使用 Aspect-Oriented-Programming (AOP) 面向切面編程")])]),t._v(" "),_("li",[_("p",[t._v("Core Container（核心容器）：Spring 的其他一切元件都是建立在此基礎之上的，包含有 Beans、Core、SpEL(Spring Expression Language) 和 Context")]),t._v(" "),_("p",[_("img",{attrs:{src:s(408),alt:"springO_3_1",title:"springO_3_1"}})])]),t._v(" "),_("li",[_("p",[t._v("Web Layer：Spring MVC的主要模組，包括 Servlet、WebSocket、Web 和 Portlet 模塊")]),t._v(" "),_("p",[_("img",{attrs:{src:s(409),alt:"springO_3_2",title:"springO_3_2"}})])]),t._v(" "),_("li",[_("p",[t._v("Data Access Layer：Spring的資料訪問模組，提供對JDBC、Hibernate等資料訪問的支援和整合，包括JDBC、ORM、Transactions、OXM、JMS 模塊")]),t._v(" "),_("p",[_("img",{attrs:{src:s(410),alt:"springO_3_3",title:"springO_3_3"}})])]),t._v(" "),_("li",[_("p",[t._v("Infrastructure：包含 AOP、Aspects、Instrumentation 以及 Messaging 模塊")]),t._v(" "),_("p",[_("img",{attrs:{src:s(411),alt:"springO_3_4",title:"springO_3_4"}})])]),t._v(" "),_("li",[_("p",[t._v("Test Layer：包含JUint等測試單元的支援")]),t._v(" "),_("p",[_("img",{attrs:{src:s(412),alt:"springO_3_5",title:"springO_3_5"}})])])]),t._v(" "),_("h2",{attrs:{id:"inversion-of-control-ioc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#inversion-of-control-ioc"}},[t._v("#")]),t._v(" Inversion of Control (IoC)")]),t._v(" "),_("ul",[_("li",[t._v("概念圖：")])]),t._v(" "),_("p",[_("img",{attrs:{src:s(413),alt:"springO_4_1",title:"springO_4_1"}})]),t._v(" "),_("ul",[_("li",[_("p",[t._v("主要功能：")]),t._v(" "),_("ul",[_("li",[t._v("創建和管理物件（控制反轉）")]),t._v(" "),_("li",[t._v("依賴注入 (Dependency injection)")])])]),t._v(" "),_("li",[_("p",[t._v("Spring 開發流程")]),t._v(" "),_("ol",[_("li",[t._v("配置你的 Spring Beans 於 xml 檔")])]),t._v(" "),_("p",[_("img",{attrs:{src:s(414),alt:"springO_4_2",title:"springO_4_2"}})]),t._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[t._v("創建一個 Spring 容器\n"),_("ul",[_("li",[t._v("Spring 容器一般稱為 ApplicationContext")])])])]),t._v(" "),_("p",[_("img",{attrs:{src:s(415),alt:"springO_4_3",title:"springO_4_3"}})]),t._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[t._v("從 Spring 容器中檢索 Beans")])]),t._v(" "),_("p",[_("img",{attrs:{src:s(416),alt:"springO_4_4",title:"springO_4_4"}})])])]),t._v(" "),_("h2",{attrs:{id:"what-is-a-spring-bean"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#what-is-a-spring-bean"}},[t._v("#")]),t._v(" What is a Spring Bean")]),t._v(" "),_("ul",[_("li",[t._v("Spring Bean 只是一個簡單的 Java 物件")]),t._v(" "),_("li",[t._v("當 Java 物件由 Spring Container 創建時，Spring 將它們稱為 “Spring Beans”")]),t._v(" "),_("li",[t._v("綜上所述，每當看到 Spring Bean 時，就聯想到 Java 物件")])]),t._v(" "),_("h2",{attrs:{id:"dependency-injection"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#dependency-injection"}},[t._v("#")]),t._v(" Dependency Injection")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("給予調用方它所需要的事物，「Dependency」是指可被方法調用的事物。「Injection」是指將「Dependency」傳遞給調用方的過程"),_("br"),t._v("\n示意圖：")]),t._v(" "),_("p",[_("img",{attrs:{src:s(417),alt:"springO_5_1",title:"springO_5_1"}})])]),t._v(" "),_("li",[_("p",[t._v("Injection Types：Spring 有多種注入方式最常見的兩種為 Constructor Injection、Setter Injection")])]),t._v(" "),_("li",[_("p",[t._v("Constructor Injection 開發步驟：")]),t._v(" "),_("ol",[_("li",[t._v("定義 dependency interface 和 class")])]),t._v(" "),_("p",[_("img",{attrs:{src:s(418),alt:"springO_5_2",title:"springO_5_2"}})]),t._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[t._v("在 class 中創建一個用於 injections 的構造函數")])]),t._v(" "),_("p",[_("img",{attrs:{src:s(419),alt:"springO_5_3",title:"springO_5_3"}})]),t._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[t._v("在 Spring 配置文件中配置 dependency injection")])]),t._v(" "),_("p",[_("img",{attrs:{src:s(420),alt:"springO_5_4",title:"springO_5_4"}})])]),t._v(" "),_("li",[_("p",[t._v("Spring 如何處理配置文件")]),t._v(" "),_("p",[_("img",{attrs:{src:s(421),alt:"springO_5_5",title:"springO_5_5"}})])]),t._v(" "),_("li",[_("p",[t._v("Setter Injection 是透過 Inject dependencies 方式來呼叫 class 的 set 方法，開發步驟如下：")]),t._v(" "),_("ol",[_("li",[t._v("在 class 中創建 setter 方法進行注入")])]),t._v(" "),_("p",[_("img",{attrs:{src:s(422),alt:"springO_5_6",title:"springO_5_6"}})]),t._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[t._v("在 Spring 配置文件中一步步配置 Dependency Injection")])]),t._v(" "),_("p",[_("img",{attrs:{src:s(423),alt:"springO_5_7",title:"springO_5_7"}})])]),t._v(" "),_("li",[_("p",[t._v("Injecting Literal Values 步驟：")]),t._v(" "),_("ol",[_("li",[t._v("在 class 中創建 setter 方法進行注入")])]),t._v(" "),_("p",[_("img",{attrs:{src:s(424),alt:"springO_5_8",title:"springO_5_8"}})]),t._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[t._v("在 Spring 配置文件中配置 setter 注入")])]),t._v(" "),_("p",[_("img",{attrs:{src:s(425),alt:"springO_5_9",title:"springO_5_9"}})]),t._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[t._v("以 Properties File 值作為依據")])]),t._v(" "),_("p",[_("img",{attrs:{src:s(426),alt:"springO_5_10",title:"springO_5_10"}})])])]),t._v(" "),_("h2",{attrs:{id:"bean-scopes"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#bean-scopes"}},[t._v("#")]),t._v(" Bean Scopes")]),t._v(" "),_("ul",[_("li",[t._v("Default Scope：Singleton\n"),_("ul",[_("li",[t._v("Spring Container 預設只創建一個 bean 的 instance")]),t._v(" "),_("li",[t._v("它緩存在記憶體中，之後不再創建")]),t._v(" "),_("li",[t._v("所有對該物件的引用都共享這個 instance")])])])]),t._v(" "),_("p",[t._v("範例：")]),t._v(" "),_("p",[_("img",{attrs:{src:s(427),alt:"springO_6_1",title:"springO_6_1"}})]),t._v(" "),_("ul",[_("li",[t._v("明確指定 Bean 範圍")])]),t._v(" "),_("p",[_("img",{attrs:{src:s(428),alt:"springO_6_2",title:"springO_6_2"}})]),t._v(" "),_("ul",[_("li",[t._v("額外的 Spring Bean 範圍")])]),t._v(" "),_("p",[_("img",{attrs:{src:s(331),alt:"springO_6_3",title:"springO_6_3"}})]),t._v(" "),_("ul",[_("li",[t._v("Prototype Scope ：每次調用或請求這個 bean 都會創建一個新的 instance")])]),t._v(" "),_("p",[_("img",{attrs:{src:s(331),alt:"springO_6_4",title:"springO_6_4"}})]),t._v(" "),_("h2",{attrs:{id:"bean-lifecycle-methods"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#bean-lifecycle-methods"}},[t._v("#")]),t._v(" Bean Lifecycle Methods")]),t._v(" "),_("ul",[_("li",[t._v("Bean Lifecycle")])]),t._v(" "),_("p",[_("img",{attrs:{src:s(429),alt:"springO_7_1",title:"springO_7_1"}})]),t._v(" "),_("ul",[_("li",[_("p",[t._v("Bean Lifecycle Methods")]),t._v(" "),_("ul",[_("li",[t._v("可以在 bean 初始化以及銷毀期間添加自定義的 code，像是自訂的邏輯方法或是資源調用(例如：資料庫、檔案、socket)")])]),t._v(" "),_("p",[t._v("初始化範例：")]),t._v(" "),_("p",[_("img",{attrs:{src:s(430),alt:"springO_7_2",title:"springO_7_2"}})]),t._v(" "),_("p",[t._v("銷毀範例：")]),t._v(" "),_("p",[_("img",{attrs:{src:s(431),alt:"springO_7_3",title:"springO_7_3"}})])]),t._v(" "),_("li",[_("p",[t._v("開發步驟：")]),t._v(" "),_("ol",[_("li",[t._v("定義 init 和 destroy 的方法")]),t._v(" "),_("li",[t._v("在 Spring 配置文件中配置方法名稱")])])])])])}),[],!1,null,null,null);i.default=r.exports}}]);